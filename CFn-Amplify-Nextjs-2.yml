AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation test

Parameters:
  ParamAmi:
    Type: String
    Default: ami-03c28b28e81872cfd
    Description: ami-07b4f72c4c356c19d = Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type(arm)
  ParamInstanceType:
    Type: String
    Default: m6g.medium
  ParamKeyName:
    Description: ssh key
    Type: AWS::EC2::KeyPair::KeyName
    Default: dev-testpj

Resources:
  # ------------------------------------------------------------#
  #  VPC
  # ------------------------------------------------------------#
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
  # ----------------------------------------------------------- #
  #  Internet Gateway
  # ----------------------------------------------------------- #
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
  # ----------------------------------------------------------- #
  #  Attach Gateway
  # ----------------------------------------------------------- #
  MyAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway
  # ----------------------------------------------------------- #
  #  Route Table
  # ----------------------------------------------------------- #
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: MyAttachGateway
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-rt
  # ----------------------------------------------------------- #
  #  Route
  # ----------------------------------------------------------- #
  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyAttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway
  # ----------------------------------------------------------- #
  #  Public Subnet
  # ----------------------------------------------------------- #
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: MyAttachGateway
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-pubsubnet
  # ----------------------------------------------------------- #
  #  Public Subnet RouteTable Association
  # ----------------------------------------------------------- #
  MyPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyRouteTable
  # ----------------------------------------------------------- #
  #  Security Group
  # ----------------------------------------------------------- #
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-sg
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-sg
  # ----------------------------------------------------------- #
  #  IAM Role(Amplify cli user)
  # ----------------------------------------------------------- #
  MyAmplifyCliUser:
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
        - arn:aws:iam::aws:policy/AdministratorAccess-Amplify
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
      Path: /
      UserName: !Sub ${AWS::StackName}-amplify-cli-user
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-amplify-cli-user
  # ----------------------------------------------------------- #
  #  IAM Role(Amplify Service User )
  #  上記のAmplify Userと同じポリシーが良い
  # ----------------------------------------------------------- #
  MyAmplifyBackendUser:
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
        - arn:aws:iam::aws:policy/AdministratorAccess-Amplify
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
      Path: /
      UserName: !Sub ${AWS::StackName}-amplify-backend-user
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-amplify-backend-user
  # ----------------------------------------------------------- #
  #  IAM User AccessKey(Amplify cli user)
  # ----------------------------------------------------------- #
  MyAmplifyCliUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref MyAmplifyCliUser
  # ----------------------------------------------------------- #
  #  IAM User AccessKey Secret(Amplify user)
  # ----------------------------------------------------------- #
  MyAmplifyCliUserAccessKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-amplify-cli-user-credentials
      SecretString: !Sub "{\"accessKeyId\":\"${MyAmplifyCliUserAccessKey}\",\"secretAccessKey\":\"${MyAmplifyCliUserAccessKey.SecretAccessKey}\"}"
  # ----------------------------------------------------------- #
  #  Amplify
  # ----------------------------------------------------------- #
  MyAmplify:
    Type: AWS::Amplify::App
    Properties:
      IAMServiceRole: !Sub ${MyAmplifyBackendUser.Arn}
      Name: !Sub ${AWS::StackName}-amplify
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-amplify
  # ----------------------------------------------------------- #
  #  IAM Role
  # ----------------------------------------------------------- #
  MyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-role
      Description: for SSM, CodeCommit
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-role
  # ----------------------------------------------------------- #
  #  CloudWatch Event Role
  # ----------------------------------------------------------- #
  MyEventIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-event-role
      Description: EC2Instance stop rule
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-event-role
  # ----------------------------------------------------------- #
  #  CloudWatch Event
  #  毎日0時に対象のインスタンスを停止（JST00:00はUTC15:00）
  # ----------------------------------------------------------- #
  MyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${AWS::StackName}-event
      Description: Stop instance dairy 00:00
      ScheduleExpression: cron(00 15 * * ? *)
      State: ENABLED
      Targets:
        - Arn: arn:aws:ssm:ap-northeast-1::automation-definition/AWS-StopEC2Instance:$DEFAULT
          Id: !Ref MyEC2
          RoleArn: !Sub ${MyEventIAMRole.Arn}
  # ----------------------------------------------------------- #
  #  Code Commit
  # ----------------------------------------------------------- #
  MyCodeCommit:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: !Sub Repository for ${AWS::StackName}
      RepositoryName: !Sub ${AWS::StackName}-repo
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-repo
  # ----------------------------------------------------------- #
  #  Instance Profile
  # ----------------------------------------------------------- #
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref MyIAMRole
      InstanceProfileName: !Sub ${AWS::StackName}-ip
  # ----------------------------------------------------------- #
  #  Launch Template
  # ----------------------------------------------------------- #
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-lt
      LaunchTemplateData: 
        ImageId: !Ref ParamAmi
        InstanceType: !Ref ParamInstanceType
        Monitoring: 
          Enabled: true
        KeyName: !Ref ParamKeyName
        NetworkInterfaces:
          - DeviceIndex: 0
            SubnetId: !Ref MyPublicSubnet
            Groups:
              - !Ref MySecurityGroup
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 24
              VolumeType: gp3
              DeleteOnTermination: true
            DeviceName: /dev/xvda
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ===== yum update =====
            yum -y update

            # install node@16.13.0
            echo ===== install node@16.13.0 =====
            curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -
            yum install nodejs -y
            npm upgrade -g npm

            # install git
            echo ===== install git =====
            yum install git -y
            su ec2-user -c "git config --global init.defaultBranch main"
            su ec2-user -c "git config --global credential.helper '!aws codecommit credential-helper $@'"
            su ec2-user -c "git config --global credential.UseHttpPath true"
            su ec2-user -c "git config --global user.email 'take.t.public@gmail.com'"
            su ec2-user -c "git config --global user.name 'takashi.take'"

            # install amplify cli
            echo ===== install amplify cli =====
            su root -c "npm install -g @aws-amplify/cli"

            # git clone 
            echo ===== git clone =====
            cd /home/ec2-user
            su ec2-user -c "git clone ${MyCodeCommit.CloneUrlHttp}"
            echo stackname = ${AWS::StackName}
        TagSpecifications:
          - ResourceType: volume
            Tags: 
              - Key: Name
                Value: !Sub ${AWS::StackName}-ebs
  # ----------------------------------------------------------- #
  #  EC2
  # ----------------------------------------------------------- #
  MyEC2:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref MyInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2